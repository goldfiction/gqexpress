// Generated by CoffeeScript 1.6.3
(function() {
  var FileStore, app, async, basicAuth, bodyParser, cookieParser, cookieSession, debug, defaultO, doEmail, express, fs, getIp, gqemail, gqpublicip, http, https, ip, log, methodOverride, moment, printLog, server, session, util, _;

  express = require("express");

  session = require("express-session");

  basicAuth = require("express-basic-auth");

  FileStore = require("session-file-store")(session);

  ip = require("ip");

  gqpublicip = require("gqpublicip");

  async = require("async");

  util = require("util");

  http = require("http");

  https = require("https");

  fs = require("fs");

  moment = require("moment");

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  cookieSession = require('cookie-session');

  methodOverride = require('method-override');

  gqemail = require('gqemail');

  _ = require("underscore");

  log = console.log;

  debug = console.error || util.debug;

  app = express();

  defaultO = {
    config: {
      environment: "development",
      server: {
        port: 8000,
        sslport: 8443,
        forceSecure: true,
        domain: "127.0.0.1",
        key: "resource/key.pem",
        cert: "resource/cert.pem",
        motd: "resource/motd",
        projectpath: "~/",
        sendreport: true,
        sendreportemail: "glidev5@gmail.com"
      },
      emailserver: {
        user: "notify553@gmail.com",
        password: "bfjqlwbhekzvkhuy",
        host: "smtp.gmail.com",
        port: 465,
        ssl: true
      },
      general: {
        jadepath: process.cwd() + "/views",
        staticpath: process.cwd() + "/public/www/"
      },
      basicauth: {
        authenticate: true,
        challenge: true,
        users: {
          admin: 1234
        }
      },
      session: {
        secret: "secret",
        path: "/sessions"
      }
    },
    set: function(app, o) {
      return app;
    },
    use: function(app, o) {
      return app;
    },
    message: ""
  };

  server = function(o, cb) {
    var config, e, errorHandle, secret, startTime;
    o = o || {};
    o = _.extend(defaultO, o);
    config = o.config;
    gqemail.setServer(o.config.emailserver);
    errorHandle = function(err) {
      debug(err.stack);
      if (o.config.server.sendreport) {
        gqemail.emailit({
          to: o.config.server.sendreportemail,
          text: err.message + "\n\n" + err.stack
        });
      }
      return cb(err, o);
    };
    process.on('uncaughtException', errorHandle);
    startTime = Date.now();
    debug("Server Booting up...");
    app.set("env", config.environment || "development");
    app.set("port", config.server.port || 80);
    app.set("sslport", config.server.sslport || 443);
    app.set("localIp", ip.address());
    app.set("views", config.general.jadepath);
    app.set("view engine", "jade");
    app = o.set(app, o);
    app.locals.deployVersion = Date.now();
    if (config.basicauth.authenticate) {
      app.use(basicAuth(config.basicauth));
    }
    app.use(express.favicon());
    app.use(express.logger("dev"));
    app.use(methodOverride('X-HTTP-Method'));
    app.use(methodOverride('X-HTTP-Method-Override'));
    app.use(methodOverride('X-Method-Override'));
    app.use(express.urlencoded());
    app.use(express.json());
    app.use(cookieParser());
    secret = config.session.secret + "";
    app.use(session({
      store: new FileStore({
        path: process.cwd() + config.session.path
      }),
      secret: secret,
      resave: true,
      saveUninitialized: true
    }));
    if ("development" === app.get("env")) {
      app.use(express.errorHandler());
    }
    app.use(function(req, res, next) {
      if ((!req.secure) && config.server.forceSecure) {
        return res.redirect('https://' + config.server.domain + ":" + config.server.sslport + req.url);
      }
      return next();
    });
    app.use(app.router);
    app = o.use(app, o);
    app.use(express["static"](config.general.staticpath));
    try {
      o.message += "\n" + fs.readFileSync(config.server.motd).toString() + "\n";
    } catch (_error) {
      e = _error;
      error(e);
    }
    o.message += "\n public IP: " + o.publicIp;
    o.message += "\n private IP: " + ip.address();
    o.message += "\n ";
    return http.createServer(app).listen(app.get("port"), function(e1) {
      var endTime, timing;
      o.message += "\n HTTP server listening on port " + app.get("port");
      if (config.server.sslport) {
        return https.createServer({
          key: fs.readFileSync(config.server.key),
          cert: fs.readFileSync(config.server.cert)
        }, app).listen(app.get("sslport"), function(e2) {
          var endTime, timing;
          endTime = Date.now();
          timing = endTime - startTime;
          o.message += "\n HTTPS server listening on port " + app.get("sslport");
          o.message += "\n Server Started @ " + moment().format('YYYY-MM-DD HH:mm:ss');
          o.message += "\n Timing: " + timing;
          return cb(e2, o);
        });
      } else {
        endTime = Date.now();
        timing = endTime - startTime;
        o.message += "\n Server Started @ " + moment().format('YYYY-MM-DD HH:mm:ss');
        o.message += "\n Timing: " + timing;
        return cb(e1, o);
      }
    });
  };

  getIp = function(o, cb) {
    return gqpublicip.getPublicIp(function(e, publicip) {
      o.publicIp = publicip;
      return cb(e, o);
    });
  };

  printLog = function(o, cb) {
    log(o.message);
    return cb(null, o);
  };

  doEmail = function(o, cb) {
    if (o.config.server.sendreport) {
      gqemail.emailit({
        to: o.config.server.sendreportemail,
        text: o.message
      });
    }
    return cb(null, o);
  };

  this.startServer = function(o, cb) {
    return async.waterfall([
      function(cb) {
        return cb(null, o);
      }, getIp, server, printLog, doEmail
    ], cb);
  };

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
